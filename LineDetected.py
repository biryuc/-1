# Python программа для иллюстрации HoughLine
# метод для обнаружения линии

import cv2

import numpy as np

# Чтение нужного изображения в
# какие операции должны быть выполнены.
# Убедитесь, что изображение в том же
# каталог, в котором находится эта программа на питоне

img = cv2.imread('Yourphoto.png')

# Конвертировать img в оттенки серого

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Применить метод определения края на изображении

edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Это возвращает массив значений r и тета

lines = cv2.HoughLines(edges, 1, np.pi / 180, 200)

# Ниже для цикла работает до т и значений тета
# находятся в диапазоне 2d массива

for r, theta in lines[0]:
    # Сохраняет значение cos (theta) в

    a = np.cos(theta)

    # Сохраняет значение греха (тета) в б

    b = np.sin(theta)

    # x0 хранит значение rcos (theta)

    x0 = a * r

    # y0 хранит значение rsin (theta)

    y0 = b * r

    # x1 хранит округленное значение (rcos (theta) -1000sin (theta))

    x1 = int(x0 + 1000 * (-b))

    # y1 хранит округленное значение (rsin (тета) + 1000cos (тета))

    y1 = int(y0 + 1000 * (a))

    # x2 хранит округленное значение (rcos (тета) + 1000sin (тета))

    x2 = int(x0 - 1000 * (-b))

    # y2 хранит округленное значение (rsin (theta) -1000cos (theta))

    y2 = int(y0 - 1000 * (a))

    # cv2.line рисует линию в img из точки (x1, y1) в (x2, y2).

    # (0,0,255) обозначает цвет линии, которая будет

    # drawn. В этом случае это красный.

    cv2.line(img, (x1, y1), (x2, y2), (0, 0, 255), 2)

# Все изменения, сделанные во входном изображении, наконец-то
# написано на новом изображении houghlines.jpg

cv2.imwrite('ResultlinesDetected.jpg', img)